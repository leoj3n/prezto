#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#   Joel Kuzmarski <leoj3n@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# -------- Customize to your needs...

# WP-CLI Bash completions

autoload bashcompinit
bashcompinit
source $HOME/.composer/vendor/wp-cli/wp-cli/utils/wp-completion.bash

# Git Bash Completion

if [ -f $(brew --prefix)/etc/bash_completion ]; then
  #. $(brew --prefix)/etc/bash_completion
fi

# Defaults

## Always open everything in Finder's list view

defaults write com.apple.Finder FXPreferredViewStyle Nlsv

# Aliases

##  Git Aliases

alias ngh="/usr/local/bin/gh"
alias gcam="gca -m"
alias gfa="gf --all"
alias gpuo="gp -u origin"
alias gpuom="gp -u origin master"
function gbp() { gf origin pull/$1/head:$2; }
alias gih="g update-index --assume-unchanged"
alias gis="g update-index --no-assume-unchanged"
alias gdh='git ls-files -v | grep "^h " | cut -d" " -f2-'
alias grm="git status | grep deleted | awk '{print \$3}' | xargs git rm"
alias gic="gcase"
function gpr() { ngh pr --fetch $3 --user $1 --repo $2; }
function giap() { # pattern
  g ls-files -co --exclude-standard | grep $1 | xargs git add
}
alias vpu='v sudo WP_TESTS_DIR=/home/vagrant/svn/wp-tests vendor/bin/phpunit'

## Hub Aliases

#alias hub="$GOPATH/bin/gh" # Hub clone written in Go (doesn't work... yet?)
eval "$(hub alias -s)"

## WordPress Aliases

alias apps="cd ~/wp/apps"
alias plugs="cd ~/wp/plugs"
alias devroots="cd /Users/leoj/Sites/www/dev/1/wp-content/themes/roots"

alias reroots="rm -rf roots.io && gfc -p retlehs/roots.io"\
" && cd roots.io && vu"

## Other Aliases

alias v="vassh"
alias t="type"
alias c="clear"
alias ep="sublp"
alias epp="ep ${PWD##*/}"
alias se="smartextract"
alias ...="cd ../.."
# alias -- -="cd -" # not working in zsh prezto
alias lsd="ls -Ad .*"
alias vu="vagrant up"
alias vs="vagrant ssh"
alias vh="vagrant halt"
alias vr="vagrant reload"
alias vd="vagrant destroy"
alias vp="vagrant provision"
alias pp="sudo lsof -i"
alias zpr="cd ~/.zprezto"
alias skel="skelgen"
alias snginx="nginx -s stop"
alias masq="$(brew --prefix)/etc/dnsmasq.conf"
alias remasq="sudo launchctl stop homebrew.mxcl.dnsmasq && sudo launchctl"\
" start homebrew.mxcl.dnsmasq"

alias pubkey="more ~/.ssh/id_rsa.pub | pbcopy | echo '=> Public key "\
"copied to pasteboard.'"

alias kextl="sudo kextload /System/Library/Extensions/AppleUSBTopCase"\
".kext/Contents/PlugIns/AppleUSBTCKeyboard.kext"

alias kextu="sudo kextunload /System/Library/Extensions/AppleUSBTopCase"\
".kext/Contents/PlugIns/AppleUSBTCKeyboard.kext > /dev/null 2>&1"

alias flush="dscacheutil -flushcache" # Flush Directory Service cache
alias whois="whois -h whois-servers.net"
alias wanip="dig +short myip.opendns.com @resolver1.opendns.com"

alias ss="open /System/Library/Frameworks/ScreenSaver"\
".framework/Versions/A/Resources/ScreenSaverEngine.app"

# Functions

## Uppercase the first letter of a git-indexed-file filename

function gcase() {
  foo=$1;
  g mv --force $foo "$(tr '[:lower:]' '[:upper:]' <<< ${foo:0:1})${foo:1}";
}

## E-T Phone Home

function h() {
  cd ~/$1;
}

## lsmod

function lsmod() {
  ls -l | awk '{k=0;for(i=0;i<=8;i++) \
    k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf("%0o ",k);print}'
}

## Generates phpunit-skelgen CLI args using a single input
# Expects to run from 'src/YourPackage' like so:
#
# $ skelgen My_Class          # single argument
# $ skelgen My_Class My/Class # two arguments; second is an optional path
#
# These commands are equivelant and both return:
#
# > Wrote skeleton for "My_ClassTest" to
# >  "../../tests/My/ClassTest.php".

function skelgen() {
  local ns=${PWD##*/}"\\"
  local class=$(echo ${1%.php} | tr "/" "_")
  local out=$(echo ${1%.php} | tr "_" "/")
  local src=out

  if [ ! "x$2" = "x" ]; then
    local out=$2
  fi

  if $(echo $out | grep --quiet "/"); then
    local begin=$(echo $out | cut -d/ -f1)
  fi

  local tst="../../tests/"
  mkdir -p $tst$begin

  phpunit-skelgen --bootstrap "../../vendor/autoload.php" --test \
    -- $ns$class $src".php" $ns$class"Test" $tst$out"Test.php"
}

## Opens a Sublime Text project and prints directory paths metadata

function sublp() {
  proj=~/Documents/Sublime/$1.sublime-project
  subl --project $proj

  # print project folders
  awk -F"[,:]" '{for(i=1;i<=NF;i++){if($i~/path\042/){print $(i+1)} } }' $proj
}

## Shortens GitHub URL

function ghio() {
  curl -i http://git.io -F "url=https://github.com/"$1 $code -F "code=${2}"
}

## Converts YouTube -> Gif

function ytgif() {
  tmp=".ytgif";
  flv="$tmp/yt.flv";
  rnd="$tmp/$RANDOM";
  youtube-dl -o "$flv" $1;
  ytsize=$(wc -c < $flv);
  mplayer $flv -endpos $[ytsize*.75]"b" -sstep 30 -vo jpeg:outdir="$rnd":smooth=30:progressive -vf scale=320:240 -nosound;
  convert -delay 30 -loop 0 "$rnd/*.jpg" yt.gif;
  rm -rf "$rnd";
  rm -ri .ytgif;
}

## Removes an item from the path
# Credit: http://stackoverflow.com/questions/370047/#370255

function path_remove() {
  IFS=:
  # convert it to an array
  t=($PATH)
  unset IFS
  # perform any array operations to remove elements from the array
  t=(${t[@]%%$1})
  IFS=:
  # output the new array
  echo "${t[*]}"
}

## Extracts or mounts of files
# Credit: http://nparikh.org/notes/zshrc.txt
# Usage: smartextract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is Mac OS X-specific.

smartextract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via smartextract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}
